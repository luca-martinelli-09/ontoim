@startuml OntoMunicipality
!theme mars
hide circle
skinparam linetype ortho

' Imported objects from OntoPiA
class Thing <<owl>>

class Entity <<l0>>
class Activity <<l0>>
class Location <<l0>>
class EventOrSituation <<l0>>
class Topic <<l0>>
class Object <<l0>>
class Characteristic <<l0>>
class Collection <<l0>>

class Address <<clv>>
class City <<clv>>
class StreetToponym <<clv>>
class SpatialObject <<clv>>
class Country <<clv>>

class TimeInterval <<ti>>
class TemporalEntity <<ti>>

class Value <<mu>>

class OnlineContactPoint <<sm>>
class PhysicalContactPoint <<sm>>
class Image <<sm>>

class AccessCondition <<accondition>>

class Person <<cpv>>

class Service <<cpsv>>

' class Currency <<pot>>
class PriceSpecification <<pot>>

class PointOfInterest <<poi>>

class Procedure <<publiccontract>>

class OfferedServiceDescription <<acco>>

class Service <<cpsv>>

' Municipality
' Aggregate the municipality entities, like the Public Organization and the City
class Municipality
Municipality --> Entity : rdfs:subclassOf

Municipality --> Organization : asOrganization
Municipality --> City : asCity

/'
Serve? bo

Municipality --> DemoEvent : hasDemoEvent
Municipality --> Service : hasService
Municipality --> AccessCondition : hasAccessCondition

Municipality --> Citizens : hasCitizens
Municipality --> Tourists : hasTourists
Municipality --> Births : hasBirths
Municipality --> Deaths : hasDeaths
Municipality --> Immigrations : hasImmigrations
Municipality --> Emigrations : hasEmigrations
Municipality --> Weddings : hasWeddings
Municipality --> Separations : hasSeparations

Municipality --> Birth : hasBirthEvent
Municipality --> Death : hasDeathEvent
Municipality --> Immigration : hasImmigrationEvent
Municipality --> Emigration : hasEmigrationEvent
Municipality --> Wedding : hasWeddingEvent
Municipality --> Separation : hasSeparationEvent
'/

' Demographic Observation
' A demographic observation can describe the demographic composition of an entity during time
' An example can be the number of subscribers to an event, emoployees of an organization, members of an association
' For a country it can be the number of citizens, weddings, deaths etc...
' A demo observation comes with its value and a demo prototype, which describes the type of person o family counted
' A demo observation can also be releated to a spatial object, which describes the spatial delimitation of the observation
' For example, we can count the number of males in a specific area, that can be a city, a borough, a street, etc...
class DemoObservation {
    value^^xsd:int
}
DemoObservation --> Activity : rdfs:subclassOf

DemoObservation --> TemporalEntity : ti:hasTemporalEntity
DemoObservation --> SpatialObject : hasSpatialDelimitation
DemoObservation --> Person : hasDemographicReference
DemoObservation --> Family : hasDemographicReference
DemoObservation --> Thing : isDemoObservationFor

class Citizens
Citizens --> DemoObservation : rdfs:subclassOf

class Tourists
Tourists --> DemoObservation : rdfs:subclassOf

Tourists --> TouristType : hasTouristType

class TouristType <<enumerated>> {
    Arrival
    Presence
}

class Births
Births --> DemoObservation : rdfs:subclassOf

Births --> BirthType : hasBirthType

class BirthType <<enumerated>> {
    AtHome
    InOtherCountry
    WithinMarriage
    WithoutMarriage
    FromForeignParent
    FromMultipleBirths
}

class Deaths
Deaths --> DemoObservation : rdfs:subclassOf

Deaths --> DeathType : hasDeathType

class DeathType <<enumerated>> {
    AtHome
    InOtherCity
    InOtherCountry
}

class Immigrations
Immigrations --> DemoObservation : rdfs:subclassOf

Immigrations --> ImmigrationType : hasImmigrationType

class ImmigrationType <<enumerated>> {
    FromOtherCity
    FromOtherCountry
    NotDefined
}

class Emigrations
Emigrations --> DemoObservation : rdfs:subclassOf

Emigrations --> EmigrationType : hasEmigrationType

class EmigrationType <<enumerated>> {
    ToOtherCity
    ToOtherCountry
    NotDefined
}

class Weddings
Weddings --> DemoObservation : rdfs:subclassOf

Weddings --> WeddingType : hasWeddingType

class WeddingType <<enumerated>> {
    ReligiousMarriage
    CivilMarriage
    MaleCivilUnion
    FemaleCivilUnion
}

class Separations
Separations --> DemoObservation : rdfs:subclassOf

Separations --> SeparationType : hasSeparationType

class SeparationType <<enumerated>> {
    Divorce
    LegalSeparation
    MaleCivilUnionSeparation
    FemaleCivilUnionSeparation
}

class Bookings
Bookings --> DemoObservation : rdfs:subclassOf

class Subscribers
Subscribers --> DemoObservation : rdfs:subclassOf

class Employees
Employees --> DemoObservation : rdfs:subclassOf

class Members
Members --> DemoObservation : rdfs:subclassOf

' A demo event represents a wedding, a death, a birth, offering a non aggregated view of a demo observation
class DemoEvent {
    ti:atTime
}
DemoEvent --> EventOrSituation : rdfs:subclassOf

DemoEvent --> Person : hasPerson
DemoEvent --> SpatialObject : hasSpatialDelimitation
DemoEvent --> Thing : isDemoEventFor

class Birth
Birth --> DemoEvent : rdfs:subclassOf

Birth --> BirthType : hasBirthType

class Death
Death --> DemoObservation : rdfs:subclassOf

Death --> DeathType : hasDeathType

class Immigration
Immigration --> DemoObservation : rdfs:subclassOf

Immigration --> ImmigrationType : hasImmigrationType

class Emigration
Emigration --> DemoObservation : rdfs:subclassOf

Emigration --> EmigrationType : hasEmigrationType

class Wedding
Wedding --> DemoObservation : rdfs:subclassOf

Wedding --> WeddingType : hasWeddingType

class Separation
Separation --> DemoObservation : rdfs:subclassOf

Separation --> SeparationType : hasSeparationType

' Events, added the organizer of the event and the subscribers
class Event <<cpev>>

Event --> Organization : isOrganizedBy
Event --> Subscribers : hasSubscribers
Event --> Subscriber : hasSubscriberEvent

class Subscriber
Subscriber --> DemoObservation : rdfs:subclassOf

class Booking
Booking --> DemoEvent : rdfs:subclassOf

' Waste production
class WasteProduction
WasteProduction --> Activity : rdfs:subclassOf

WasteProduction --> Value : hasValue
WasteProduction --> TemporalEntity : ti:hasTemporalEntity
WasteProduction --> SpatialObject : hasSpatialDelimitation

WasteProduction --> WasteCategory : hasWasteCategory

class WasteCategory
WasteCategory --> Topic : rdfs:subclassOf

' Road accidents
class RoadAccident {
    ti:atTime
}
RoadAccident --> EventOrSituation : rdfs:subclassOf

RoadAccident --> RevelationUnit : detectedBy
RoadAccident --> Geometry : clv:hasGeometry
RoadAccident --> Road : hasRoad
RoadAccident --> WeatherCondition : hasWeatherCondition
RoadAccident --> AccidentType : hasAccidentType
RoadAccident --> InvolvedEntity : hasInvolvedEntity

class RevelationUnit
RevelationUnit --> Agent : rdfs:subclassOf

class Road {
    roadName^^l0:name
}
Road --> Location : rdfs:subclassOf

Road --> Address : clv:hasAddress
Road --> RoadCategory : hasRoadCategory
Road --> RoadType : hasRoadType
Road --> PavementType : hasPavementType
Road --> IntersectionOrNotType : hasIntersectionType
Road --> RoadbedType : hasRoadbedType
Road --> RoadSignalPresenceType : hasRoadSignalPresenceType

class RoadCategory
RoadCategory --> Topic : rdfs:subclassOf

class RoadType
RoadType --> Characteristic : rdfs:subclassOf

class PavementType
PavementType --> Characteristic : rdfs:subclassOf

class IntersectionOrNotType
IntersectionOrNotType --> Characteristic : rdfs:subclassOf

class RoadbedType
Roadbed --> Characteristic : rdfs:subclassOf

class RoadSignalPresenceType
RoadSignalPresenceType --> Characteristic : rdfs:subclassOf

class WeatherCondition
WeatherCondition --> Characteristic : rdfs:subclassOf

class AccidentType
AccidentType --> Characteristic : rdfs:subclassOf

class InvolvedEntity
InvolvedEntity --> Entity : rdfs:subclassOf

InvolvedEntity --> AccidentCircumstance : hasAccidentCircumstance

class AccidentCircumstance
AccidentCircumstance --> Characteristic : rdfs:subclassOf

class InvolvedVehicle
InvolvedVehicle --> InvolvedEntity : rdfs:subclassOf

InvolvedVehicle --> Vehicle : hasVehicle
InvolvedVehicle --> InvolvedPerson : hasConducent
InvolvedVehicle --> InvolvedPerson : hasFrontPassenger
InvolvedVehicle --> InvolvedPerson : hasBackPassenger

class InvolvedPerson
InvolvedPerson --> InvolvedEntity : rdfs:subclassOf
InvolvedPerson --> Person : rdfs:subclassOf

InvolvedPerson --> InvolvedPersonStatus : hasInvolvedPersonStatus

class InvolvedPersonStatus
InvolvedPersonStatus --> Characteristic : rdfs:subclassOf

class InvolvedObstacle
InvolvedObstacle --> InvolvedEntity : rdfs:subclassOf

class Vehicle {
    licensePlate^^l0:identifier
    registrationYear^^xsd:gYear
    brand^^xsd:literal
    model^^xsd:literal
    color^^xsd:literal
}
Vehicle --> Object : rdfs:subclassOf

Vehicle --> VehicleCategory : hasVehicleCategory
Vehicle --> Value : hasMeasurement
Vehicle --> Country : registrationCountry

class VehicleCategory
VehicleCategory --> Topic : rdfs:subclassOf

' Organization, added end of activity, bankruptcy and liquidation, added number of empolyees, local units and heritage
' Added section and demograpgic classification of organization for private companies (taken from Camera di Commercio)
' Added an Artisan Organization with artisan Register code and date
class Organization <<cov>> {
	endActivityDate^^xsd:date
    bankruptcyDate^^xsd:date
    liquidationDate^^xsd:date
}

' Organization --> Payment : sentPayment (see later)
Organization --> Employees : hasEmployees
Organization --> Address : hasLocalUnitAddress
Organization --> Service : providesService
Organization --> Heritage : hasHeritage

class PrivateOrganization <<cov>>
PrivateOrganization --> Organization : rdfs:subclassOf

PrivateOrganization --> OrganizationSection : hasOrganizationSection
PrivateOrganization --> CompanyDemographicClassification : hasDemographicClassification

class OrganizationSection <<enumerated>> {
    Ordinary
    Artisan
    CertifiedIncubator
    DirectGrowers
    AgriculturalEnterprise
    SocialEnterprise
    InnovativeSME
    SmallBusines
    SchoolWorkAlternation
    BusinessRegister
    SimpleBusinesses
    InnovativeStartUp
    CompanyAmongProfessionals
    REASubjectOnly
}

class CompanyDemographicClassification <<enumerated>> {
    Ordinary
    Women
    Youth
    ForeignEU
    ForeignNonEU
}

class ArtisanOrganization {
    artisanRegisterCode^^l0:identifier
    artisanRegisterDate^^xsd:date
}
ArtisanOrganization --> PrivateOrganization : rdfs:subclassOf

/'
payments can be implemented using procedures and public contracts ontology (more complicated)

class Payment {
    title^^xsd:literal
    paymentCode^l0:identifier
    currencyValue^^xsd:double
    paymentDate^^xsd:datetime
}
Payment --> EventOrSituation : rdfs:subclassOf

Payment --> Organization : paymentSentTo
Payment --> Currency : pot:hasCurrency
Payment --> Procedure : withProcedure
'/

' Associations are sublclass of organizations, with referent, association category (controlled vocabulary) and members observation
class Association {
    registerID^^l0:identifier
    registeredDate^^xsd:date
    removedFromRegisterDate^^xsd:date
}
Association --> PrivateOrganization : rdfs:subclassOf

Association --> Person : hasReferent
Association --> AssociationCategory : hasAssociationCategory
Association --> Members : hasMembers

class AssociationCategory
AssociationCategory --> Topic : rdfs:subclassOf

/'
better with a controlled vocabulary (?)

Volountary
Cultural
SocialPromotion
Sport
Recreational
SocialCooperative
Arms
ONLUS
Welfare
Philantropic
'/

' Traffic Flow observation. Added street toponym to road segment and vehicle category (controlled vocabulary)
class TrafficFlow <<iot>>
TrafficFlow --> RoadSegment : iot:hasFeatureOfInterest
TrafficFlow --> VehicleCategory : hasVehicleCategory

class RoadSegment <<iot>>
RoadSegment --> StreetToponym : clv:hasStreetToponym

' Booking statistical data for accommodation facilities
class AccommodationFacility <<acco>>
AccommodationFacility --> Bookings : rdfs:hasBookings
AccommodationFacility --> BookingEvent : rdfs:hasBookingEvent

' Added an Accessible Point of Interest, a POI with online contact point, physical contact point, an organization owner and an access condition.
class AccessiblePointOfInterest
AccessiblePointOfInterest --> PointOfInterest : rdfs:subclassOf
AccessiblePointOfInterest --> OnlineContactPoint : sm:hasOnlineContactPoint
AccessiblePointOfInterest --> PhysicalContactPoint : sm:hasPhysicalContactPoint
AccessiblePointOfInterest --> AccessCondition : accondition:hasAccessCondition
AccessiblePointOfInterest --> Organization : ownedBy
AccessiblePointOfInterest --> OfferedServiceDescription : hasOfferedServiceDescription

' The heritage of an organization, a collection of buildings owned by the organization. There are different types of heritage, like state owned assets, unavailable ecc...
class Heritage
Heritage --> Collection : rdfs:subclassOf

Heritage --> HeritageType : hasHeritageType
Heritage --> Building : hasBuilding

class HeritageType <<enumerated>> {
    StateOwnedAssets
    UnavailableAssets
    AvailableAssets
    PrivateAssets
}

' A building is an accessible point of interest associated with information about the land registry. A building can be concessed to an other organization. The information about the concession are stored in a Procedure Document.
class Building {
    buildingCode^^l0:identifier
}
Building --> AccessiblePointOfInterest : rdfs:subclassOf

Building --> Procedure : concessedWithProcedure
Building --> LandRegistry : hasLandRegistry

class LandRegistry {
    sheet^^xsd:literal
    map^^xsd:literal
    subordinate^^xsd:literal
}
LandRegistry --> Object : rdfs:subclassOf

LandRegistry --> LandRegistryCategory : hasLandRegistryCategory

class LandRegistryCategory
LandRegistryCategory --> Topic : rdfs:subclassOf

' A school can be public or private is an accessible point of interest, with services, subscribers and courses that can be offer
class School
School --> AccessiblePointOfInterest : rdfs:subclassOf

School --> SchoolCategory : hasSchoolCategory
School --> Course : offersCourse
School --> Subscribers : hasSubscribers
School --> Subscriber : hasSubscriberEvent

' controlled vocabulary
class SchoolCategory
SchoolCategory --> Topic : rdfs:subclassOf

class PublicSchool {
    mechanographicCode^^l0:identifier
}
PublicSchool --> School : rdfs:subclassOf

class PrivateSchool
PrivateSchool --> School : rdfs:subclassOf

' A course organized by a school or an organization is an activity located in a classroom (phisical or online), with a price and subscribers
class Course {
    courseCode^^l0:identifier
    l0:name
    l0:description
    durationHours^^xsd:int
}
Course --> Activity : rdfs:subclassOf

Course --> School : offeredBy
Course --> TimeInterval : hasTimeValidity
Course --> ClassRoom : locatedInClassRoom
Course --> PriceSpecification : pot:hasPriceSpecification
Course --> Subscribers : hasSubscribers
Course --> Subscriber : hasSubscriberEvent

' A classroom is a space where a course take place. A physical classroom has an address, a virtual classroom is associated with the service used.
class ClassRoom {
    l0:name
}
ClassRoom --> Location : rdfs:subclassOf

ClassRoom --> Course : locationForCourse

class PhysicalClassRoom
PhysicalClassRoom --> ClassRoom : rdfs:subclassOf

PhysicalClassRoom --> Address : clv:hasAddress

class VirtualClassRoom
VirtualClassRoom --> ClassRoom : rdfs:subclassOf

VirtualClassRoom --> VideoCommunicationService : usesVideoCommunicationService

class VideoCommunicationService {
    l0:name
    serviceURL^^xsd:anyuri
}
VideoCommunicationService --> Object : rdfs:subclassOf

' A plant, with the species, the common name, the born year, planted date and its status in time. The status is described as the plant health, the height and the circumference
class Plant {
    plantCode^^l0:identifier
    commonName^^xsd:literal
    species^^xsd:literal
    plantingDate^^xsd:datetime
    bornYear^^xsd:gYear
}
Plant --> PointOfInterest : rdfs:subclassOf

Plant --> PlantStatusInTime : hasStatusInTime
Plant --> GreenZone : isSituatedIn

class PlantStatusInTime
PlantStatusInTime --> EventOrSituation : rdfs:subclassOf

PlantStatusInTime --> Value : hasMeasurement
PlantStatusInTime --> PlantHealth : hasHealthStatus
PlantStatusInTime --> TemporalEntity : ti:hasTemporalEntity

class PlantHealth <<enumerated>> {
    Good
    Fair
    Bad
    Stump
    Dead
}

' A green zone is an accessible point of interest that can also contains plants and can has an area
class GreenZone
GreenZone --> AccessiblePointOfInterest : rdfs:subclassOf

GreenZone --> Value : hasMeasurement
GreenZone --> Plant : hasPlant

' The road signals are point of interests with a signal value (e.g. 50 for a speed limit or the name of the destination indicated)
class RoadSignal {
    signalValue^^xsd:literal
    lastMaintenanceDate^^xsd:date
}
RoadSignal --> PointOfInterest : rdfs:subclassOf

RoadSignal --> RoadSignalType : hasSignalType

' The road signal type is a controlled vocabulary of all road signals, with a value, an image and a category
class RoadSignalType {
    signalValue^^xsd:literal
}
RoadSignalType --> Object : rdfs:subclassOf

RoadSignalType --> RoadSignalCategory : hasRoadSignalCategory
RoadSignalType --> Image : sm:hasImage

class RoadSignalCategory <<enumerated>> {
    LightSignal
    Warning
    Prohibition
    Mandatory
    Supplementary
    UrbanInformation
    MotorwayInformation
    OtherRoadInformation
}

' An hospial is an accessible point of interest with hospital departments, services, total number of beds and departments which are also described as hospitals
class Hospital {
    totalNumberOfBeds^^xsd:int
}
Hospital --> AccessiblePointOfInterest : rdfs:subclassOf

Hospital --> HospitalDepartment : hasHospitalDepartment

class PublicHospital
PublicHospital --> Hospital : rdfs:subclassOf

class PrivateHospital
PrivateHospital --> Hospital : rdfs:subclassOf

class HospitalDepartment
HospitalDepartment --> Hospital : rdfs:subclassOf

HospitalDepartment --> Hospital : isDepartmentOf
@enduml